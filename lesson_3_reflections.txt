When would you want to create a remote repository rather than keeping all your work 
local?

  Using a remote repository would be useful when collaborating with others on a project
  so that everyone is pulling from and branching off of one primary codebase that everyone
  has access to. 
  
Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?

  So that you can be conscious of when changes are made to the code that you may
  be working on.  One wouldn't want an automatic pull to modify code or write overtop
  of what they'd been working on. 
  
Describe the differences between forks, clones, and branches.  When would you 
use one instead of another?

  Forks are clones of GitHub repositories that are made from one GitHub user to
  another, so that changes can be made to work not owned personally.  A clone more
  generally is a copy of a repository, either from GitHub to GitHub, or from GitHub to 
  local, or from local to local.  A branch is when a developer takes some existing work 
  that has been committed into a repo up to some point, and codes separately from the
  main/master branch.
  
What is the benefit of having a copy of the last known state of the remote
stored locally?
  
  If you are working on a specific piece of code for some time, then taking a copy
  and then diffing the origin/master will show you what changes have been made by others 
  that may affect your work.
  
How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

  Collaboration without using Git or GitHub would be much more time consuming, and 
  would allow for much less tandem/aggregate team velocity. Sharing files with one another
  is easy enough, and finding a text comparison program can be done easily enough, 
  but the level of tedium involved with either a.) remembering all of the files you'd edited
  so you can communicate that with the team (for comparison purposes), or b.) comparing
  all files regularly to ensure synchronicity seems unreasonable now that such a solution
  exists such as git. Frankly, I really don't want to imagine such a world. :-) 
  
When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

  It seems like it would be a good idea to always use a separate branch unless the 
  change is trivial like a typo, in which case creating a commit on master may be fine,
  depending on the protocol of the development team in question.  Often times/usually, 
  it is good practice to ensure that all changes to master come via pull requests, so that
  there is a last minute sanity check.  It's also good practice to ensure that at least two
  sets of eyes look at any code that will go into master, to ensure nothing malicious
  was added.
